{
  "name": "sandbox",
  "description": "A nifty javascript sandbox for node.js",
  "homepage": "http://gf3.github.com/sandbox/",
  "author": {
    "name": "Gianni Chiappetta",
    "email": "gianni@runlevel6.org",
    "url": "http://gf3.ca"
  },
  "bugs": {
    "url": "https://github.com/gf3/sandbox/issues"
  },
  "contributors": [
    {
      "name": "Bradley Meck",
      "email": "bradley.meck@gmail.com"
    },
    {
      "name": "Dominic Tarr",
      "url": "http://cyber-hobo.blogspot.com"
    }
  ],
  "version": "0.8.6",
  "main": "./lib/sandbox",
  "directories": {
    "lib": "./lib"
  },
  "engines": [
    "node >=0.5.0"
  ],
  "devDependencies": {
    "mocha": "1.20.1",
    "should": "0.6.3",
    "sinon": "~1.10.2"
  },
  "repository": {
    "type": "git",
    "url": "https://gf3@github.com/gf3/sandbox.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "license": {
    "type": "Public Domain",
    "url": "http://github.com/gf3/sandbox/raw/master/UNLICENSE"
  },
  "readme": "# Node Sandbox\n\nA nifty javascript sandbox for node.js.\n\n\n## Some features\n\n- Can be used to execute untrusted code.\n- Support for timeouts (e.g. prevent infinite loops)\n- Support for memory errors (and memory errors)\n- Handles errors gracefully\n- Restricted code (cannot access node.js methods)\n- Supports `console.log` and `print` utility methods\n- Supports interprocess messaging with the sandboxed code\n\n\n## Example\n\nBe sure to check out [example/example.js](https://github.com/gf3/sandbox/blob/master/example/example.js)\n\n```javascript\nvar s = new Sandbox();\ns.run('1 + 1 + \" apples\"', function(output) {\n  // output.result == \"2 apples\"\n});\n```\n\n\n## Documentation\n\n### `Sandbox`#`run`(`code`, `hollaback`)\n\n* `code` {`String`} — string of Javascript to be executed.\n* `hollaback` {`Function`} — called after execution with a single argument, `output`.\n    - `output` is an object with two properties: `result` and `console`. The `result`\n      property is an inspected string of the return value of the code. The `console`\n      property is an array of all console output.\n\nFor example, given the following code:\n\n```javascript\nfunction add(a, b){\n  console.log(a);\n  console.log(b);\n  return a + b;\n}\n\nadd(20, 22);\n```\n\nThe resulting output object is:\n\n```javascript\n{\n  result: \"42\",\n  console: [\"20\", \"22\"]\n}\n```\n\n### `Sandbox`#`postMessage`(`message`)\n\n* `message` {`String`} - message to send to the sandboxed code\n\nFor example, the following code will send a message from outside of the sandbox in\nand then the sandboxed code will respond with its own message. Note that the sandboxed\ncode handles incoming messages by defining a global `onmessage` function and can\nsend messages to the outside using the `postMessage` function.\n\nSandboxed code:\n```javascript\nonmessage = function(message){\n  if (message === 'hello from outside') {\n    postMessage('hello from inside');\n  }\n};\n```\n\nSandbox:\n```\nvar sandbox = new Sandbox();\nsandbox.run(sandboxed_code);\nsandbox.on('message', function(message){\n  // Handle message sent from the inside\n  // In this example message will be 'hello from inside'\n});\nsandbox.postMessage('hello from outside');\n```\n\nThe process will ONLY be considered finished if `onmessage` is NOT a function.\nIf `onmessage` is defined the sandbox will assume that it is waiting for an\nincoming message.\n\n\n## Installation & Running\n\nLet's get it! The easiest way is through npm:\n\n    npm install sandbox\n\nOr if you'd like to play with the code, see the examples, run the tests,\nwhat-the-fuck-ever...\n\n    git clone git://github.com/gf3/sandbox.git\n\nAnd run some examples:\n\n    node example/example.js\n\n\n## Tests\n\nTo run the tests simply run the test file with node.\n\n    npm test\n\n\n## License\n\nSandbox is [UNLICENSED](http://unlicense.org/).\n\n\n## Contributors\n\n- [Gianni Chiappetta](http://github.com/gf3) – [gf3.ca](http://gf3.ca)\n- [Bradley Meck](https://github.com/bmeck)\n- [Dominic Tarr](http://github.com/dominictarr) – [cyber-hobo.blogspot.com](http://cyber-hobo.blogspot.com/)\n- [Eli Mallon](https://github.com/iameli) – [iame.li](http://iame.li/)\n- [Evan Schwartz](https://github.com/emschwartz)\n",
  "readmeFilename": "README.md",
  "_id": "sandbox@0.8.6",
  "dist": {
    "shasum": "477df47c4cfa45a52bcf2193a021bf2e7c1c7f95"
  },
  "_from": "sandbox@~0.8.6",
  "_resolved": "https://registry.npmjs.org/sandbox/-/sandbox-0.8.6.tgz"
}
